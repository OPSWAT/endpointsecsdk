///////////////////////////////////////////////////////////////////////////////////////////////
///  Sample Code for scan-vuln
///  Reference Implementation using OPSWAT Endpoint Vulnerability Module
///  
///  Created by Chris Seiler
///  OPSWAT OEM Solutions Architect
///////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.IO;
using System.Reflection;

namespace scan_vuln.sdk_pipe
{
    public class SDK_Pipe
    {
        public static void InitializeFramework()
        {
            // This code is used to initialize the SDK_PIPE Framework
            // The folling linkk describes the setup
            // https://software.opswat.com/OESIS_V4/html/c_sdk.html
            //

            string path = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
            string passkey = File.ReadAllText(path + "/pass_key.txt");
            string config = "{ \"config\" : { \"passkey_string\": \"" + passkey + "\", \"enable_pretty_print\": true, \"online_mode\": false, \"silent_mode\": true, \"uri_prefix\": \"https://vcr.opswat.com/gw/file/download\"  } }";


            // Note if you get a Bad Image exception, that may be because Prefer 32-bit is checked
            IntPtr outPtr = IntPtr.Zero;
            int rc = SDK_Adapter.wa_api_setup(config, out outPtr);
            string json_out = "{ }";
            if (outPtr != IntPtr.Zero)
            {
                json_out = XStringMarshaler.PtrToString(outPtr);
                SDK_Adapter.wa_api_free(outPtr);
            }
            else
            {
                Console.Out.WriteLine("Failed to initialize SDK_PIPE: " + rc);
                // Refer to the following doc for errors:  https://software.opswat.com/OESIS_V4/html/c_return_codes.html

                throw new Exception("Failed to initialize");
            }
        }


        // This is the main call used to send JSON in and out of the API
        public static int Invoke(string json_config, out string json_out)
        {
            IntPtr outPtr = IntPtr.Zero;
            int rc = SDK_Adapter.wa_api_invoke(json_config, out outPtr);
            json_out = "{ }";
            if (outPtr != IntPtr.Zero)
            {
                json_out = XStringMarshaler.PtrToString(outPtr);
                SDK_Adapter.wa_api_free(outPtr);
            }
            return rc;
        }

        public static void Teardown()
        {
            SDK_Adapter.wa_api_teardown();
        }

        public static int DetectAllProducts(out string json_out)
        {
            int result = 0;
            string json_in = "{\"input\": { \"method\": 0 } }";
            result = SDK_Pipe.Invoke(json_in, out json_out);
            return result;
        }

        public static int ConsumeOfflineVmodDatabase(string databaseFileLocation)
        {
            string json_in = "{\"input\" : {\"method\" : 50520, \"dat_input_source_file\" : \"" + databaseFileLocation + "\"}}";
            string json_out;
            int rc = SDK_Pipe.Invoke(json_in, out json_out);
            return rc;
        }

        public static int GetProductVulnerability(int signatureId, out string json_out)
        {
            string json_in = "{\"input\": { \"method\": 50505, \"signature\": " + signatureId + " } }";
            int rc = SDK_Pipe.Invoke(json_in, out json_out);
            return rc;
        }

        public static int GetProductInfo(int signatureId, out string json_out)
        {
            string json_in = "{\"input\": { \"method\": 109, \"signature\": " + signatureId + " } }";
            int rc = SDK_Pipe.Invoke(json_in, out json_out);
            return rc;
        }


    }
}
