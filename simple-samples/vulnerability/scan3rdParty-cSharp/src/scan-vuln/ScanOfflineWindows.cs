using Newtonsoft.Json.Linq;
using scan_vuln.sdk_pipe;
using System;
using System.Collections.Generic;

namespace scan_vuln.poco
{
    public class ScanOfflineWindows
    {

        // This method just is used to quickly parse the products
        private static JArray GetProductArrayFromString(string product_json)
        {
            JArray result = new JArray();

            dynamic jsonOut = JObject.Parse(product_json);
            var products = jsonOut.result.detected_products;

            for (int i = 0; i < products.Count; i++)
            {
                JObject newEntry = JObject.FromObject(new
                {
                    signature = (int)products[i].signature,
                    sig_name = (string)products[i].sig_name,
                });
                result.Add(newEntry);
            }

            return result;
        }



        private static List<CVEDetail> GetPatchDetailListFromJson(int signatureId, string productName, string patchJson)
        {
            List<CVEDetail> result = new List<CVEDetail>();

            JArray vulnerability = new JArray();

            dynamic jsonOut = JObject.Parse(patchJson);

            if ((bool)jsonOut.result.has_vulnerability)
            {
                JArray cveList = jsonOut.result.cves;

                foreach (dynamic cve in cveList)
                {
                    CVEDetail patchDetail = new CVEDetail();

                    patchDetail.title = productName;
                    patchDetail.id = signatureId.ToString();
                    patchDetail.cve = cve.cve;
                    patchDetail.severity = cve.severity;

                    result.Add(patchDetail);
                }
            }

            return result;
        }




        public static List<CVEDetail> GetPatchList(JArray productList)
        {
            List<CVEDetail> result = new List<CVEDetail>();

            foreach (JObject product in productList)
            {
                string json_out = "";
                int signatureId = (int)product["signature"];
                string productName = (string)product["sig_name"];
                Util.CheckSuccess(ApplicationPatch.GetProductVulnerability(signatureId, out json_out));

                List<CVEDetail> patchDetailList = GetPatchDetailListFromJson(signatureId, productName, json_out);

                if (patchDetailList.Count > 0)
                {
                    result.AddRange(patchDetailList);
                }
            }


            return result;
        }

        public static void ScanPatches(List<CVEDetail> patchList)
        {
            try
            {
                string json_result;
                SDK_Pipe.InitializeFramework();
                SDK_Pipe.ConsumeOfflineVmodDatabase("vmod.dat");

                SDK_Pipe.DetectAllProducts(out json_result);




            }
            catch (Exception e)
            {

            }

            //Util.CheckSuccess(ApplicationPatch.DownloadDatabase(downloadToken, "wuo.dat", "c:/temp/wuo.dat", out downloadStatus));
            Util.CheckSuccess(ApplicationPatch.LoadPatchDatabase());



            // Detect all of the products
            Util.CheckSuccess(ApplicationPatch.DetectAllProducts(out json_result));

            JArray productList = GetProductArrayFromString(json_result);

            List<CVEDetail> applicationPatchesList = GetPatchList(productList);
            patchList.AddRange(applicationPatchesList);
        }


    }
}
