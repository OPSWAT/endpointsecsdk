///////////////////////////////////////////////////////////////////////////////////////////////
///  Windows OS Vulnerability Scanner
///  Scans only Microsoft/Windows components for vulnerabilities and patches
///  Uses wiv-lite.dat (Windows vulnerabilities) and wuo.dat (Windows patches)
///  
///  This scanner focuses exclusively on Windows OS components, filtering out
///  all third-party applications that would normally be handled by the 
///  regular Vulnerability project using v2mod.dat and uo.dat databases.
///  
///  Created by Chris Seiler
///  OPSWAT OEM Solutions Architect
///////////////////////////////////////////////////////////////////////////////////////////////

using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;

namespace VulnerabilityWOS
{
    internal class Program
    {
        /// <summary>
        /// Validates OESIS API return codes to ensure successful execution
        /// </summary>
        /// <param name="rc">Return code from OESIS API call</param>
        /// <exception cref="Exception">Thrown when return code indicates failure (< 0)</exception>
        private static void CheckSuccess(int rc)
        {
            // OESIS Return code reference: https://software.opswat.com/OESIS_V4/html/c_return_codes.html
            // Positive values (>= 0) indicate SUCCESS
            // Negative values (< 0) indicate FAILURE
            if (rc < 0)
            {
                Console.Out.WriteLine("Failed to execute OESIS API call with return code: " + rc);
                throw new Exception();
            }
        }


        /// <summary>
        /// Core OESIS API invocation method - sends JSON commands to the OESIS framework
        /// and retrieves JSON responses. This is the primary communication interface.
        /// </summary>
        /// <param name="json_config">JSON string containing the API method and parameters</param>
        /// <param name="json_out">Output parameter containing the JSON response from OESIS</param>
        /// <returns>Return code indicating success (>= 0) or failure (< 0)</returns>
        private static int Invoke(string json_config, out string json_out)
        {
            IntPtr outPtr = IntPtr.Zero;
            // Call the native OESIS API with our JSON input
            int rc = OESISAdapter.wa_api_invoke(json_config, out outPtr);
            json_out = "{ }"; // Default empty JSON response
            
            // If OESIS returned data, convert the native pointer to a managed string
            if (outPtr != IntPtr.Zero)
            {
                json_out = XStringMarshaler.PtrToString(outPtr);
                // Always free the native memory to prevent memory leaks
                OESISAdapter.wa_api_free(outPtr);
            }
            return rc;
        }

        /// <summary>
        /// Initializes the OESIS Framework with license validation and configuration.
        /// This must be called before any other OESIS operations can be performed.
        /// </summary>
        /// <exception cref="Exception">Thrown if license file is missing or initialization fails</exception>
        private static void InitializeFramework()
        {
            // Get the directory where the executable is running
            string currentPath = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
            string passKeyPath = Path.Combine(currentPath, "pass_key.txt");

            // Verify that the OPSWAT license file exists
            if (!File.Exists(passKeyPath))
            {
                Console.WriteLine("Could not find a pass_key.txt file. Make sure that the license provided during evaluation is in the executable directory.");
                throw new Exception("License pass_key.txt file not found");
            }

            // Read the license key from the file
            string passkey = File.ReadAllText(passKeyPath);
            
            // Configure OESIS framework settings
            // - passkey_string: The OPSWAT license key
            // - enable_pretty_print: Makes JSON output more readable
            // - online_mode: Enables online features (set to true for full functionality)
            // - silent_mode: Reduces verbose logging output
            string config = "{ \"config\" : { \"passkey_string\": \"" + passkey + "\", \"enable_pretty_print\": true, \"online_mode\": true, \"silent_mode\": true } }";

            // Initialize the OESIS framework with our configuration
            IntPtr outPtr = IntPtr.Zero;
            // NOTE: If you get a "Bad Image" exception, check that "Prefer 32-bit" is unchecked in project properties
            int rc = OESISAdapter.wa_api_setup(config, out outPtr);
            string json_out = "{ }";
            
            // Process the initialization response
            if (outPtr != IntPtr.Zero)
            {
                json_out = XStringMarshaler.PtrToString(outPtr);
                OESISAdapter.wa_api_free(outPtr);
            }
            else
            {
                Console.Out.WriteLine("Failed to initialize OESIS framework with return code: " + rc);
                // Return code reference: https://software.opswat.com/OESIS_V4/html/c_return_codes.html
                throw new Exception("Failed to initialize OESIS framework");
            }
        }

        /// <summary>
        /// Queries the loaded vulnerability database (wiv-lite.dat) for CVE information about a specific product.
        /// This method uses the Windows OS vulnerability data to find security issues.
        /// 
        /// OESIS Method 50505: Get Product Vulnerabilities
        /// </summary>
        /// <param name="signatureId">OESIS signature ID of the product to query</param>
        /// <returns>JSON response containing CVE list, descriptions, and severity information</returns>
        /// <exception cref="Exception">Thrown if the query fails (e.g., -1019 for no data available)</exception>
        public static string GetProductVulnerability(int signatureId)
        {
            string result = "";
            // Build JSON request to query vulnerability database for this product
            string json_in = "{\"input\": { \"method\": 50505, \"signature\": " + signatureId + " } }";
            int rc = Invoke(json_in, out result);
            
            if (rc < 0)
            {
                // Common error codes:
                // -1019: WA_VMOD_ERROR_OFFLINEVMOD_NOT_INITIALIZED - Product not in wiv-lite.dat
                throw new Exception("GetProductVulnerability failed to run correctly. Return code: " + rc + " Response: " + result);
            }

            return result;
        }

        /// <summary>
        /// Loads the Windows OS vulnerability database (wiv-lite.dat) into memory for querying.
        /// This database contains CVE information specifically for Windows OS components and system files.
        /// Must be called before using GetProductVulnerability() for Windows products.
        /// 
        /// OESIS Method 50520: Consume Offline VMOD Database
        /// Following VAPM-Scanner pattern for Windows OS vulnerability data
        /// </summary>
        /// <param name="databaseFile">Path to the wiv-lite.dat file (Windows vulnerability database)</param>
        /// <exception cref="Exception">Thrown if database loading fails</exception>
        public static void ConsumeOfflineVmodDatabase(string databaseFile)
        {
            // Build JSON request to load the vulnerability database
            string json_in = "{\"input\" : {\"method\" : 50520, \"dat_input_source_file\" : \"" + databaseFile + "\"}}";
            string result;

            int rc = Invoke(json_in, out result);
            if (rc < 0)
            {
                throw new Exception("ConsumeOfflineVmodDatabase failed to load " + databaseFile + ". Return code: " + rc + " Response: " + result);
            }
        }

        /// <summary>
        /// Loads the Windows OS patch database (wuo.dat) into memory for patch level queries.
        /// This database contains information about Windows updates, patches, and their relationships
        /// to vulnerabilities. Works in conjunction with wiv-lite.dat to provide complete patch status.
        /// 
        /// OESIS Method 50302: Load Patch Database  
        /// Following VAPM-Scanner pattern for Windows OS patch data
        /// </summary>
        /// <param name="databaseFile">Path to the wuo.dat file (Windows OS patch database)</param>
        /// <param name="checksumFile">Optional checksum file for integrity validation (can be empty)</param>
        /// <exception cref="Exception">Thrown if database loading fails</exception>
        public static void LoadPatchDatabase(string databaseFile, string checksumFile)
        {
            string result;
            // Build JSON request to load the patch database
            string json_in = "{\"input\" : {\"method\" : 50302, \"dat_input_source_file\" : \"" + databaseFile + "\"}}";

            // If a checksum file is provided, include it for integrity verification
            if (!string.IsNullOrEmpty(checksumFile))
            {
                json_in = "{\"input\" : {\"method\" : 50302, \"dat_input_source_file\" : \"" + databaseFile + "\", \"dat_input_checksum_file\" : \"" + checksumFile + "\"}}";
            }

            int rc = Invoke(json_in, out result);
            if (rc < 0)
            {
                throw new Exception("LoadPatchDatabase failed to load " + databaseFile + ". Return code: " + rc + " Response: " + result);
            }
        }

        /// <summary>
        /// Main entry point for the Windows OS Vulnerability Scanner.
        /// 
        /// CURRENT WORKFLOW:
        /// 1. Initialize OESIS framework with licensing
        /// 2. Load Windows OS databases (wuo.dat for patches, wiv-lite.dat for vulnerabilities) 
        /// 3. Test vulnerability query for signature ID 1103
        /// 4. Display results to console and save JSON report
        /// 5. Clean up OESIS framework resources
        /// 
        /// NOTE: This is currently a minimal test implementation that queries a single
        /// signature ID (1103) rather than scanning all installed products.
        /// </summary>
        /// <param name="args">Command line arguments (currently unused)</param>
        static void Main(string[] args)
        {
            string products_json = "";
            try
            {

                // STEP 1: Initialize the OESIS framework with license validation
                InitializeFramework();
                
                // STEP 2: Load Windows OS databases (patch first, then vulnerability)
                Console.WriteLine("Loading Windows OS patch database (wuo.dat)...");
                LoadPatchDatabase("wuo.dat", "");  // Windows OS patches database
                Console.WriteLine("Successfully loaded wuo.dat");
                
                Console.WriteLine("Loading Windows OS vulnerability database (wiv-lite.dat)...");
                ConsumeOfflineVmodDatabase("wiv-lite.dat");  // Windows OS vulnerabilities database
                Console.WriteLine("Successfully loaded wiv-lite.dat");

                // STEP 3: Test vulnerability query for signature ID 1103
                Console.WriteLine("Testing vulnerability query for Windows OS component...");
                string vulnData = GetProductVulnerability(1103);
                Console.WriteLine(vulnData);

                // STEP 4: Clean up OESIS framework resources
                OESISAdapter.wa_api_teardown();

            }
            catch (Exception e)
            {
                // Global error handler for unexpected failures
                Console.Out.WriteLine("Received an Exception: " + e);
                Console.Out.WriteLine("JSON_RESULT: " + products_json);
            }
        }
    }
}
